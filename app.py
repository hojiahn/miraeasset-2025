# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4mLN_BapqzXLShlGVhjxRSWEv01unl3
"""

import streamlit as st
import json
import os
import re
import requests
from datetime import date
from jinja2 import Environment, FileSystemLoader

# 1) 기본 경로 및 템플릿 설정
BASE_PATH     = './미래에셋'
TEMPLATE_NAME = 'report_template.md'
os.makedirs(BASE_PATH, exist_ok=True)
env = Environment(loader=FileSystemLoader(BASE_PATH), autoescape=False)
template = env.get_template(TEMPLATE_NAME)

# 2) HyperCLOVA 호출 함수
SYSTEM = {
    "role": "system",
    "content": "당신은 금융시장 뉴스와 기술적·거시적 지표를 분석하여, 투자자 성향에 기반한 전략 보고서를 작성하는 전문가입니다. 논리적인 근거와 데이터 기반의 판단을 전문적, 구체적, 단계적으로 서술해주세요."
}
def call_hyperclova(prompt: str) -> str:
    resp = requests.post(
        "https://clovastudio.stream.ntruss.com/v1/openai/chat/completions",
        headers={
            "Content-Type": "application/json",
            "Authorization": "Bearer nv-4694f04c3d0945478ec2da0b0378572d3Q2D"
        },
        json={
            "model": "HCX-005",
            "messages": [SYSTEM, {"role": "user", "content": prompt}],
            "max_tokens": 2048,
            "temperature": 0.0,
            "top_p": 1.0,
            "n": 1
        }
    )
    resp.raise_for_status()
    return resp.json()["choices"][0]["message"]["content"].strip()

# 3) Streamlit 입력 UI
st.set_page_config(page_title="투자 전략 보고서 자동화", layout="wide")
st.title("HyperInsight: 전략 보고서 생성기")

single_summary = st.text_area("뉴스 요약 입력", height=200)
my_stocks = st.text_input(
    "관심 종목 (쉼표로 구분)",
    "두산로보틱스,한화에어로스페이스,삼성전자,포스코퓨처엠,에코프로,에코프로비엠,삼성바이오로직스,한국전력공사,SK하이닉스,한미반도체,LG에너지솔루션,LX세미콘,리노공업"
)
related_stocks = [s for s in my_stocks.split(',') if s in single_summary]
econ_indicators = st.text_input("KOSPI", "2,734.02 (▲1.21%)")
fx_rate = st.text_input("환율", "1,389.2원 (▼4.3)")
base_rate = st.text_input("기준금리", "3.50%")
rsi = st.text_input("RSI", "65/55")
macd = st.text_input("MACD", "골든크로스")
volume = st.text_input("거래량", "평균 거래량 1.2백만")
other_indicators = st.text_input("기타 기술 지표", "5일 이평선 > 20일 이평선")

# 사용자 투자 성향 분리
risk_pref = st.selectbox("리스크 선호도", ["안정", "안정추구", "중립", "적극투자", "공격"])
period_pref = st.radio("투자 기간", ["단기 (1개월 이하)", "중기 (1~6개월)", "장기 (6개월 이상)"])
sector_pref = st.text_input("관심 섹터", "2차전지")

# 사용자 성향 문장 구성
user_profile = f"""리스크 선호: {risk_pref}, 투자 기간: {period_pref}, 관심 섹터: {sector_pref}"""

# 4) 보고서 생성 버튼
if st.button("보고서 생성"):
    llm_context = f"""
[요약된 뉴스]
{single_summary}

[내 종목]
{', '.join(related_stocks)}

[경제 지표]
KOSPI: {econ_indicators}, 환율: {fx_rate}, 기준금리: {base_rate}

[기술 지표]
RSI(14일): {rsi}, MACD: {macd}, 거래량: {volume}, 기타: {other_indicators}

[사용자 투자 성향]
{user_profile}
----
"""

    try:
        prompt_a = llm_context + """
1) 핵심 키워드 3개 (각 10자 이내)
2) 주요 사건 설명 (150자 이내)
3) 영향 등급(L/M/H) + 예상 평균 수익률(%) 및 변동성(표준편차)
4) PESTEL 분석 (각 요소별 키워드 3개 + 설명 2줄)
5) 2022~2025년 유사 이벤트 사례 2개 (기업·연도·수치·출처)
▶JSON 형식, 리스트당 최소 5항목
"""
        resp_a = call_hyperclova(prompt_a)
        m = re.search(r'\{[\s\S]+\}', resp_a)
        event_json = m.group() if m else json.dumps({
            "description": "데이터 없음",
            "impact": {
                "short": {"factor": "", "desc": ""},
                "mid":   {"factor": "", "desc": ""},
                "long":  {"factor": "", "desc": ""}
            }
        })

        prompt_b = llm_context + f"event: {event_json}\n\n- 단기(1주)/중기(1개월)/장기(3개월 이상)별 예상 평균 수익률 및 변동성 포함 표 (3행 이상)\n- 동일 기간 KOSPI vs S&P500 vs 섹터 수익률 비교 표\n- 기술 지표 상세 해설 (각 5줄 이상)\n- 각 인사이트마다 실제 사례(기업·연도·수치) 및 출처 표기\n▶표 + bullet 5개 이상, 전문적이고 구체적으로"
        analysis_text = call_hyperclova(prompt_b)

        prompt_c = llm_context + f"analysis: {analysis_text}\n\n- 5×3 전략 표 완전 채우기 (예상 수익률·리스크 등급 포함)\n- 각 전략별 권고 등급(매수/보유/매도) 및 리스크 허용도별 포트폴리오 비중 제안\n- 근거·사례·출처 포함, bullet 5개 이상, 전문적이고 구체적으로"
        strategy_text = call_hyperclova(prompt_c)

        prompt_d = llm_context + f"strategy: {strategy_text}\n\n- 3문장 요약\n- 주요 가정 5개 + 가정 불이행 시 손실 시나리오(%)\n- 주요 리스크 5개 (발생확률 L/M/H + 예상 손실 범위%), 전문적이고 구체적으로"
        summary_text = call_hyperclova(prompt_d)

        json_schema_prompt = (
            llm_context +
            f"event: {event_json}\n\n"
            f"analysis: {analysis_text}\n\n"
            f"strategy: {strategy_text}\n\n"
            f"summary: {summary_text}\n\n"
            "아래 JSON 스키마에 딱 맞춰 순수 JSON만 반환해주세요. 모든 과정은 전문적이고 구체적으로 진행해주세요. 단, strat의 total_weight(전체 비중)는 LLM이 자유롭게 판단한 값을 넣고, data에는 기준일(date) 필드는 제외하세요.\n"
            "{\n"
            '  "title":"투자 전략 보고서 제목",\n'
            '  "date":"YYYY-MM-DD",\n'
            '  "intro":{"purpose":"보고서 목적","scope":"분석 범위"},\n'
            '  "news":{"summary":"뉴스 요약","keywords":["키워드1","키워드2","키워드3"]},\n'
            f'  "market":{{"kospi":"{econ_indicators}","fx":"{fx_rate}","rate":"{base_rate}","rsi":"{rsi}","macd":"{macd}","volume":"{volume}","other":"{other_indicators}" }},\n'
            '  "event": {\n'
            '    "description":"사건 설명",\n'
            '    "impact": {\n'
            '      "short":{"factor":"단기 영향 요인","desc":"단기 설명 예시"},\n'
            '      "mid":{"factor":"중기 영향 요인","desc":"중기 설명 예시"},\n'
            '      "long":{"factor":"장기 영향 요인","desc":"장기 설명 예시"}\n'
            '    }\n'
            '  },\n'
            '  "strat": {\n'
            '    "short":{"cons":"단기 보수적 전략 근거","cautious":"단기 안정추구 전략 근거","neutral":"단기 중립 전략 근거","aggressive":"단기 적극투자 전략 근거","very_aggressive":"단기 공격투자 전략 근거"},\n'
            '    "mid":{"cons":"중기 보수적 전략 근거","cautious":"중기 안정추구 전략 근거","neutral":"중기 중립 전략 근거","aggressive":"중기 적극투자 전략 근거","very_aggressive":"중기 공격투자 전략 근거"},\n'
            '    "long":{"cons":"장기 보수적 전략 근거","cautious":"장기 안정추구 전략 근거","neutral":"장기 중립 전략 근거","aggressive":"장기 적극투자 전략 근거","very_aggressive":"장기 공격투자 전략 근거"},\n'
            '    "points":{"A":"핵심 종목 A 전략 포인트","B":"핵심 종목 B 전략 포인트"},\n'
            '    "total_weight":"",\n'
            '    "assumptions":["미국 반도체 지원 정책 유지","KOSPI 안정 성장"],\n'
            '    "risks":["정책 변화","글로벌 경기 둔화"]\n'
            '  },\n'
            '  "conclusion":"삼성전자는 미국 반도체 지원을 바탕으로 장기 성장 기대",\n'
            '  "scenarios":[{"name":"무역 분쟁 심화","level":"High","action":"포트폴리오 다각화"},{"name":"긴장 완화","level":"Low","action":"추가 매수"}],\n'
            '  "data":{"source":"KOSPI, Bloomberg","freq":"매일"}\n'
            "}"
        )

        raw_final = call_hyperclova(json_schema_prompt)
        match = re.search(r'\{[\s\S]+\}', raw_final)
        json_text = match.group() if match else raw_final
        json_text = re.sub(r'(?<=\d),(?=\d)', '', json_text)
        json_text = re.sub(r',\s*([}\]])', r'\1', json_text).strip()
        context = json.loads(json_text)

        # 기본값 설정
        default_event = {
            "description": "",
            "impact": {
                "short": {"factor": "", "desc": ""},
                "mid": {"factor": "", "desc": ""},
                "long": {"factor": "", "desc": ""}
            }
        }
        if not isinstance(context.get("event"), dict):
            context["event"] = default_event
        else:
            ev = context["event"]
            ev.setdefault("description", "")
            imp = ev.setdefault("impact", {})
            for period in ("short", "mid", "long"):
                p = imp.setdefault(period, {})
                p.setdefault("factor", "")
                p.setdefault("desc", "")

        default_strat = {
            "short": {"cons":"","cautious":"","neutral":"","aggressive":"","very_aggressive":""},
            "mid": {"cons":"","cautious":"","neutral":"","aggressive":"","very_aggressive":""},
            "long": {"cons":"","cautious":"","neutral":"","aggressive":"","very_aggressive":""},
            "points": {}, "total_weight":"", "assumptions":[], "risks":[]
        }
        context.setdefault("strat", default_strat)
        context.setdefault("scenarios", [])
        context.setdefault("conclusion", "")
        context.setdefault("data", {"source":"","date":"","freq":""})
        context.setdefault("intro", {"purpose": "", "scope": ""})

        context["date"] = date.today().isoformat()

        rendered_md = template.render(**context)
        output_path  = os.path.join(BASE_PATH, 'final_report.md')
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(rendered_md)

        st.markdown(rendered_md)
        st.download_button("보고서 다운로드", data=rendered_md, file_name="final_report.md", mime="text/markdown")

    except Exception as e:
        st.error(f"⛔ 예기치 못한 오류 발생: {e}")